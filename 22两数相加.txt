给定两个非空链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例:

输入: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
输出: 7 -> 8 -> 0 -> 7

双栈，退栈相加，进位

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        
        ListNode s1=l1;
        ListNode s2=l2;
        while(s1 !=null){
            stack1.push(s1.val);
            s1 = s1.next;
        }
        while(s2 !=null){
            stack2.push(s2.val);
            s2 =s2.next;
        }
        
        ListNode head = null;  //用于存放结果，头插法插入值
        
        int flag =0;
        int value =0;
        while(! stack1.isEmpty() || !stack2.isEmpty() || flag !=0){
            value =0;
            if( ! stack1.isEmpty()){
                value += stack1.pop();
            }
            if(! stack2.isEmpty()){
                value += stack2.pop();
            }
            value += flag;
            
            ListNode newHead = new ListNode( value%10);
            flag= value/10;
            newHead.next = head;
            head = newHead;
        }
        
        return head;
    }
}