给定一个 N 叉树，返回其节点值的后序遍历。
	  1
             /      |     \
           3       2      4
         /   \
      5      6
返回其后序遍历  [5,6,3,2,4,1]

// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/


//采用NRL的方式遍历，通过栈反转即为LRN

class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> res = new ArrayList<Integer>();
        Stack<Node> stack = new Stack<>();
        
        if(root ==null) return res;
        else{
            stack.push(root);
            while( ! stack.isEmpty()){
                Node gen = stack.pop();
                res.add(gen.val);
                for(Node n :gen.children){
                    stack.push(n);
                }
            }
        }
        Collections.reverse(res);
        return res;
    }
}

递归
public List<Integer> postorder1(Node root) {
    List<Integer> res = new ArrayList<>();
    if(root == null) return res;
    helper(root,res);
    return res;
}

private void helper(Node root, List<Integer> res) {
    if(root == null) return;
    for(Node node : root.children){
        helper(node,res);
    }
    res.add(root.val);
}